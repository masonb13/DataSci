parameter sweep
cluster:
	batch file
	dependencies in modules
	
python pickling

python arg parse gives cmd line args to python file
.env variables

enough to start writing

Next:
Write scientific paper "latek"
Read through some scripts and try to write what I can


slurm
%j job id
%N 

argparse in python for passing cmd variables to python
https://docs.python.org/3/library/argparse.html
#--include parameters
    parser = argparse.ArgumentParser()
    parser.add_argument('--START',type=int)
    parser.add_argument('--END'  ,type=int)

	 #--capture arguments
    args = parser.parse_args()

	//args (--START,--END)
	args.START


python script -> CSV of parameters
q 0:100
simnum 0:1000
sim num		q
	.		.
	.		.



#!bin/bash

#--arguments
SLURM_SCRIPT=$1
ITERATION_LIST=$2

#--functions
function check_number_of_jobs(){
    local UNAME=$(whoami)
    local NJOBS=$(squeue -u ${UNAME} | wc -l)
    echo $NJOBS
}

#--main
while read line; do
    while [[ $(check_number_of_jobs) -gt 3975 ]]; do
        sleep 10m
    done
    echo Sending $line           # MARK progress
    sbatch $line ${SLURM_SCRIPT} # SUBMIT JOB
done < ${ITERATION_LIST}


iteration list:
#mcandrew

import sys
import numpy as np
import pandas as pd

if __name__ == "__main__":

    fout = open("./iteration_list.txt","w")
    
    runs = pd.read_csv("runs.csv")
    for idx,row in runs.iterrows():
        NMISS  = row.NMISS
        SIMNUM = row.SIMNUM

        fout.write("--export=ALL,NMISS={:d},SIMNUM={:d}\n".format(NMISS,SIMNUM))


#mcandrew

import sys
sys.path.append("../")

import numpy as np
import pandas as pd

from mods.index import index

if __name__ == "__main__":

    #--download forecast data
    idx = index("../analysisdata/")
    F = idx.grabForecasts_f()

    #--remove unneeded column
    F = F.drop(columns = ["Unnamed: 0"])

    #--only keep the week ahead targets
    F = F.loc[F.Target.isin([0,1,2,3]),:]
    
    #--some bins are considered character and others are floats.
    #--Changing this to always be float
    F["Bin_start_incl"]  = F.Bin_start_incl.astype(float)
    F["Bin_end_notincl"] = F.Bin_end_notincl.astype(float)

    #--add in season
    ew2season = idx.grabEW2Season()
    F = F.merge(ew2season, on = ["EW"])

    #--SUBSET HERE IF NEEDED
    #--only 2017/2018 and on
    #F = F.loc[F.Season_int>=7]
    
    runs = pd.DataFrame()
    for N,((location,target,mw,season,season_int),F_t) in enumerate(F.groupby(["Location","Target","MW","Season","Season_int"])):
        d = pd.DataFrame({"Location":[location],"Target":[target],"MW":[mw],"Season":[season],"Season_int":[season_int]})
        runs = runs.append(d)
    runs.to_csv("runs.csv",index=False)

Sim num		p		q		time 		i 	
	0		.20		.		0			2	
	0		.20
	0
	0
	0